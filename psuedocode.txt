Creating Data is sometimes a two-request process...

Just a reminder that creating data functionality might be a two-request process:
1. First request displays a form for the user to enter the data
2. Second request to submit the form to the server where the data is created


The 5-step process to implementing CRUD functionality

When we build out CRUD functionality in most web apps, here is the process we will repeat over and over again:

1. Determine the "proper" route (HTTP Method & Endpoint). Use RESTful conventions whenever possible.https://gist.github.com/jim-clark/17908763db7bd3c403e6
2. Add the UI (link and/or form) that will trigger the HTTP request that matches the route.
3. Define the route in the appropriate router module that will match the HTTP request and map it to the <controller>.<method> that will perform the desired functionality.
4. Add the controller action/method and be sure to export it.
5. In the controller, perform necessary CRUD and either render (passing it data) in the case of a GET request, or redirect if data has been mutated (POST, PUT & DELETE). If rendering, code the view template if necessary.






done 1 Create a destinationSchema that will provide the structure for destination subdocuments that will be embedded:

    DONE


DONE 2 Add the following additional property to the Flight Model:



DONE 3 Implement the following User Story:
AAU, when viewing the list of flights, I want to click on a "detail" link displayed next to each flight to view all of the properties for that flight (show view), including each of its destinations.



            1. Determine the "proper" route (HTTP Method & Endpoint). 

                GET /flights/:id

            2. Add the UI (link and/or form) that will trigger the HTTP request that matches the route.

                "Details" link on flights/index view 

            3. Define the route in the appropriate router module that will match the HTTP request and map it to the <controller>.<method> that will perform the desired functionality.

                router.get('/flights/:id', flightsCtrl.show)

            4. Add the controller action/method and be sure to export it.

                function show() ....

            5. In the controller, perform necessary CRUD and either render (passing it data) in the case of a GET request, or redirect if data has been mutated (POST, PUT & DELETE). If rendering, code the view template if necessary.

                Render





DONE 4 Implement the following User Story:
AAU, when viewing the details page (show view) for a flight, I want to see a list of that flight's destinations (airport & arrival)




DONE 5 Implement the following User Story:
AAU, when viewing the details page (show view) for a flight, I want to be able to add a destination for that flight. Each destination, as defined by the schema above, includes an arrival date/time & one of the established airport codes._
Note: Multiple destinations are possible by adding them one at a time.

Hints:

Display a form below the list of destinations.


            1. Determine the "proper" route (HTTP Method & Endpoint). 

                POST /flights/:id/destinations

            2. Add the UI (link and/or form) that will trigger the HTTP request that matches the route.

                form underneath details

            3. Define the route in the appropriate router module that will match the HTTP request and map it to the <controller>.<method> that will perform the desired functionality.

                router.post('/', )

            4. Add the controller action/method and be sure to export it.



            5. In the controller, perform necessary CRUD and either render (passing it data) in the case of a GET request, or redirect if data has been mutated (POST, PUT & DELETE). If rendering, code the view template if necessary.





Bonuses
6 Sort the list of destinations for a flight by the arrival date/time in ascending order.

    // manipulate the data being sent to the show page
    // same as index view sorting

7 Implement the following User Story:
AAU, when viewing the details page (show view) for a flight, I want to be able to delete any current destination for that flight.

    1. Determine the "proper" route (HTTP Method & Endpoint). Use RESTful conventions whenever possible.https://gist.github.com/jim-clark/17908763db7bd3c403e6

        DELETE /destinations/:id

    2. Add the UI (link and/or form) that will trigger the HTTP request that matches the route.

        add delete button on table 

    3. Define the route in the appropriate router module that will match the HTTP request and map it to the <controller>.<method> that will perform the desired functionality.
    4. Add the controller action/method and be sure to export it.
    5. In the controller, perform necessary CRUD and either render (passing it data) in the case of a GET request, or redirect if data has been mutated (POST, PUT & DELETE). If rendering, code the view template if necessary.

 8 When adding a destination for a flight, exclude the airports listed in the <select> that have already been used by other destinations and/or the flight's airport.


















option for time: 


departs: {
  type: Date,
  default: function () {
    const dt = new Date();
    return dt.setFullYear(dt.getFullYear() + 1);
  }
}











Mothballed time parser: 

function parseDate(flight) {
    const months = [`Jan`, `Feb`, 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    const month = months[flight.departs.getMonth()];
    const day = flight.departs.getDate();
    const year = 1900 + flight.departs.getYear();
    const hour = flight.departs.getHours();
    const minute = flight.departs.getMinutes();
    const second = flight.departs.getSeconds();
    const parsedDate = `${month} ${day}, ${year} at ${hour}:${minute}:${second}`;
    console.log(parsedDate)
    return parsedDate;
}


Other option: 

default: function() {
      const today = new Date();
      const dd = String(today.getDate()).padStart(2, '0');
      const mm = String(today.getMonth() + 1).padStart(2, '0');
      const yyyy = today.getFullYear() + 1;
      return `${mm}/${dd}/${yyyy}`;
}