1. Create a ticketSchema that will be compiled into a Ticket Model with the following properties:

    DONE 

2. Modify the show view for a flight to render, as you see fit (table, grid, etc.), a list of tickets that have been created for that flight.

    DONE


3. Also on the flight's show view, display a New Ticket link (perhaps styled to look like a button) that when clicked, shows the ticket's new view used to create a ticket for the flight. When the form is submitted, create the ticket on the server and redirect back to the flight's show view.


    requests: 
        DONE first is to get the new ticket form page

            1. Determine the "proper" route (HTTP Method & Endpoint). 

                GET /tickets/new

            2. Add the UI (link and/or form) that will trigger the HTTP request that matches the route.

                button already exists

            3. Define the route in the appropriate router module that will match the HTTP request and map it to the <controller>.<method> that will perform the desired functionality.

                // create router for tickets 
                // router.get('/tickets/new', ticketsCtrl.new)

            4. Add the controller action/method and be sure to export it.

                // create controller for tickets 

            5. In the controller, perform necessary CRUD and either render (passing it data) in the case of a GET request, or redirect if data has been mutated (POST, PUT & DELETE). If rendering, code the view template if necessary.




        second is to post the data and redirect back to show view 

            1. Determine the "proper" route (HTTP Method & Endpoint). 

                POST /flights/tickets/:id/flight 

            2. Add the UI (link and/or form) that will trigger the HTTP request that matches the route.

                DONE

            3. Define the route in the appropriate router module that will match the HTTP request and map it to the <controller>.<method> that will perform the desired functionality.

                router.post('/flights/tickets/:id/flight', ticketsCtrl.create);

            4. Add the controller action/method and be sure to export it.

                function create(req, res) {
                    // this is where you add the ticket data and connect it to the flight 
                }

            5. In the controller, perform necessary CRUD and either render (passing it data) in the case of a GET request, or redirect if data has been mutated (POST, PUT & DELETE). If rendering, code the view template if necessary

                // redirect to show page 



4. Style the app



5. Add delete feature for tickets 